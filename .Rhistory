#Reset row names again...not sure why I have to do this again
rownames(energy_clean_final) = NULL
#Since, I had to transform NM values, to NM. I need to rename New Mexico as "NM"
energy_clean_final[energy_clean_final == "NM."] = "NM"
#Remove columns with no observations
energy_clean_final = energy_clean_final[,-c(12)]
energy_clean_final = energy_clean_final[,-c(18:19)]
energy_clean_final = energy_clean_final[,-c(14)]
#This data is now in the format I need to be able to use it, and cleaned sufficiently.
graph_3 = ggplot(data = dataset_final_new, aes(x = state, y = Renewables, col = state_category, label=state)) +
geom_point() + scale_color_manual(values=c("blue", "purple", "red")) +geom_text(hjust=0, vjust=-0.5, size = 3) + theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank()) + xlab("State") + ylab("Renewable Energy (% electricity generation)")
graph_3
### Clean Energy Data ####
energy_clean = energy[-c(1:9), ]  #remove rows 1-9
colnames(energy_clean) = energy_clean[1,] #set column names and remove corresponding row
energy_clean = energy_clean[-c(1), ]  #remove row corresponding to variable names
#Remove data that is unnecessary for our analysis
energy_clean = energy_clean[-c(1:2),]
energy_clean = energy_clean[-c(3),]
energy_clean = energy_clean[-c(4:5),]
energy_clean = energy_clean[-c(6),]
energy_clean = energy_clean[-c(8:34),]
energy_clean = energy_clean[-c(8:11),]
energy_clean = energy_clean[-c(9),]
energy_clean = energy_clean[-c(14:27),]
energy_clean = energy_clean[-c(15),]
energy_clean = energy_clean[-c(16:51),]
energy_clean = energy_clean[-c(20:21),]
energy_clean = energy_clean[-c(21:22),]
energy_clean = energy_clean[-c(22:25),]
#Create a state vector including US and DC and another vector with just the fifty states
state = c("US","AL","AK","AZ", "AR" ,"CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
fiftystates = c("AL","AK","AZ", "AR" ,"CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
#Transform matrix from long to wide format
transpose = t(energy_clean)
#Make the matrix a dataframe
transpose = as.data.frame(transpose)
#Set the column names
colnames(transpose) = transpose[1,]
#remove 1st and second row
transpose = transpose[-c(1:2),]
#Add state vector as a variable
transpose_1 = cbind(transpose, state)
transpose_1 = as.data.frame(transpose_1)
#reset row names
rownames(transpose_1) = NULL
#reaarange data so state variable is in column 1
energy_clean_2 = transpose_1[,c(22,2:21)]
#Change missing values to N/A
energy_clean_3 = na_if(energy_clean_2,"--")
energy_clean_3 = na_if(energy_clean_3,"NM")
#Change * to 0 (These are values less than .5 that were rounded to 0 in dataset)
energy_clean_3[energy_clean_3 == "*"] <- "0"
#Remove US and DC data
energy_clean_3 = energy_clean_3[-c(1), ]
energy_clean_final = energy_clean_3[-c(9), ]
#Reset row names again...not sure why I have to do this again
rownames(energy_clean_final) = NULL
#Since, I had to transform NM values, to NM. I need to rename New Mexico as "NM"
energy_clean_final[energy_clean_final == "NM."] = "NM"
#Remove columns with no observations
energy_clean_final = energy_clean_final[,-c(12)]
energy_clean_final = energy_clean_final[,-c(18:19)]
energy_clean_final = energy_clean_final[,-c(14)]
#This data is now in the format I need to be able to use it, and cleaned sufficiently.
graph_5.0.1 = ggplot(data = final_dataset, aes(x = new_solar, y = avg_temp, col = state_category, label = state, group = state_category)) +
geom_point() + scale_color_manual(values=c("blue", "purple", "red")) +
geom_text(hjust=1, vjust=1.5, size = 3) +
xlab("Solar Energy") +
scale_y_continuous(name = "Average Temperature", limits = c(40,75)) +
geom_smooth(method="lm", se = FALSE)
graph_5.0.1
### Clean Energy Data ####
energy_clean = energy[-c(1:9), ]  #remove rows 1-9
colnames(energy_clean) = energy_clean[1,] #set column names and remove corresponding row
energy_clean = energy_clean[-c(1), ]  #remove row corresponding to variable names
#Remove data that is unnecessary for our analysis
energy_clean = energy_clean[-c(1:2),]
energy_clean = energy_clean[-c(3),]
energy_clean = energy_clean[-c(4:5),]
energy_clean = energy_clean[-c(6),]
energy_clean = energy_clean[-c(8:34),]
energy_clean = energy_clean[-c(8:11),]
energy_clean = energy_clean[-c(9),]
energy_clean = energy_clean[-c(14:27),]
energy_clean = energy_clean[-c(15),]
energy_clean = energy_clean[-c(16:51),]
energy_clean = energy_clean[-c(20:21),]
energy_clean = energy_clean[-c(21:22),]
energy_clean = energy_clean[-c(22:25),]
#Create a state vector including US and DC and another vector with just the fifty states
state = c("US","AL","AK","AZ", "AR" ,"CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
fiftystates = c("AL","AK","AZ", "AR" ,"CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
#Transform matrix from long to wide format
transpose = t(energy_clean)
#Make the matrix a dataframe
transpose = as.data.frame(transpose)
#Set the column names
colnames(transpose) = transpose[1,]
#remove 1st and second row
transpose = transpose[-c(1:2),]
#Add state vector as a variable
transpose_1 = cbind(transpose, state)
transpose_1 = as.data.frame(transpose_1)
#reset row names
rownames(transpose_1) = NULL
#reaarange data so state variable is in column 1
energy_clean_2 = transpose_1[,c(22,2:21)]
#Change missing values to N/A
energy_clean_3 = na_if(energy_clean_2,"--")
energy_clean_3 = na_if(energy_clean_3,"NM")
#Change * to 0 (These are values less than .5 that were rounded to 0 in dataset)
energy_clean_3[energy_clean_3 == "*"] <- "0"
#Remove US and DC data
energy_clean_3 = energy_clean_3[-c(1), ]
energy_clean_final = energy_clean_3[-c(9), ]
#Reset row names again...not sure why I have to do this again
rownames(energy_clean_final) = NULL
#Since, I had to transform NM values, to NM. I need to rename New Mexico as "NM"
energy_clean_final[energy_clean_final == "NM."] = "NM"
#Remove columns with no observations
energy_clean_final = energy_clean_final[,-c(12)]
energy_clean_final = energy_clean_final[,-c(18:19)]
energy_clean_final = energy_clean_final[,-c(14)]
#This data is now in the format I need to be able to use it, and cleaned sufficiently.
graph_5.0 = ggplot(data = final_dataset, aes(x = new_solar, y = avg_temp, col = state_category, label = state, group = state_category)) +
geom_point() + scale_color_manual(values=c("blue", "purple", "red")) +
geom_text(hjust=1, vjust=1.5, size = 3) +
ylab("Average Temperature") +
xlab("Solar Energy") + geom_smooth(method="lm", se = FALSE)
graph_5.0
graph_6 = ggplot(data = final_dataset, aes(x = Renewables, y = co2_emissions, col = state_category, label = state, group = state_category)) +
geom_point() + scale_color_manual(values=c("blue", "purple", "red")) +
geom_text(hjust=1, vjust=1.5, size = 3) +
ylab("CO2 Emissions") +
xlab("Renewable Energy %")
graph_6
### Clean Energy Data ####
energy_clean = energy[-c(1:9), ]  #remove rows 1-9
colnames(energy_clean) = energy_clean[1,] #set column names and remove corresponding row
energy_clean = energy_clean[-c(1), ]  #remove row corresponding to variable names
#Remove data that is unnecessary for our analysis
energy_clean = energy_clean[-c(1:2),]
energy_clean = energy_clean[-c(3),]
energy_clean = energy_clean[-c(4:5),]
energy_clean = energy_clean[-c(6),]
energy_clean = energy_clean[-c(8:34),]
energy_clean = energy_clean[-c(8:11),]
energy_clean = energy_clean[-c(9),]
energy_clean = energy_clean[-c(14:27),]
energy_clean = energy_clean[-c(15),]
energy_clean = energy_clean[-c(16:51),]
energy_clean = energy_clean[-c(20:21),]
energy_clean = energy_clean[-c(21:22),]
energy_clean = energy_clean[-c(22:25),]
#Create a state vector including US and DC and another vector with just the fifty states
state = c("US","AL","AK","AZ", "AR" ,"CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
fiftystates = c("AL","AK","AZ", "AR" ,"CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
#Transform matrix from long to wide format
transpose = t(energy_clean)
#Make the matrix a dataframe
transpose = as.data.frame(transpose)
#Set the column names
colnames(transpose) = transpose[1,]
#remove 1st and second row
transpose = transpose[-c(1:2),]
#Add state vector as a variable
transpose_1 = cbind(transpose, state)
transpose_1 = as.data.frame(transpose_1)
#reset row names
rownames(transpose_1) = NULL
#reaarange data so state variable is in column 1
energy_clean_2 = transpose_1[,c(22,2:21)]
#Change missing values to N/A
energy_clean_3 = na_if(energy_clean_2,"--")
energy_clean_3 = na_if(energy_clean_3,"NM")
#Change * to 0 (These are values less than .5 that were rounded to 0 in dataset)
energy_clean_3[energy_clean_3 == "*"] <- "0"
#Remove US and DC data
energy_clean_3 = energy_clean_3[-c(1), ]
energy_clean_final = energy_clean_3[-c(9), ]
#Reset row names again...not sure why I have to do this again
rownames(energy_clean_final) = NULL
#Since, I had to transform NM values, to NM. I need to rename New Mexico as "NM"
energy_clean_final[energy_clean_final == "NM."] = "NM"
#Remove columns with no observations
energy_clean_final = energy_clean_final[,-c(12)]
energy_clean_final = energy_clean_final[,-c(18:19)]
energy_clean_final = energy_clean_final[,-c(14)]
#This data is now in the format I need to be able to use it, and cleaned sufficiently.
final_dataset = final_dataset |> mutate(co2_pop = co2_emissions/labor_force)
graph_6.0 = ggplot(data = final_dataset, aes(x = Renewables, y = co2_pop, col = state_category, label = state, group = state_category)) +
geom_point() + scale_color_manual(values=c("blue", "purple", "red")) +
geom_text(hjust=1, vjust=1.5, size = 3) +
ylab("CO2 Emissions") +
xlab("Renewable Energy %")
graph_6.0
### Clean Energy Data ####
energy_clean = energy[-c(1:9), ]  #remove rows 1-9
colnames(energy_clean) = energy_clean[1,] #set column names and remove corresponding row
energy_clean = energy_clean[-c(1), ]  #remove row corresponding to variable names
#Remove data that is unnecessary for our analysis
energy_clean = energy_clean[-c(1:2),]
energy_clean = energy_clean[-c(3),]
energy_clean = energy_clean[-c(4:5),]
energy_clean = energy_clean[-c(6),]
energy_clean = energy_clean[-c(8:34),]
energy_clean = energy_clean[-c(8:11),]
energy_clean = energy_clean[-c(9),]
energy_clean = energy_clean[-c(14:27),]
energy_clean = energy_clean[-c(15),]
energy_clean = energy_clean[-c(16:51),]
energy_clean = energy_clean[-c(20:21),]
energy_clean = energy_clean[-c(21:22),]
energy_clean = energy_clean[-c(22:25),]
#Create a state vector including US and DC and another vector with just the fifty states
state = c("US","AL","AK","AZ", "AR" ,"CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
fiftystates = c("AL","AK","AZ", "AR" ,"CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
#Transform matrix from long to wide format
transpose = t(energy_clean)
#Make the matrix a dataframe
transpose = as.data.frame(transpose)
#Set the column names
colnames(transpose) = transpose[1,]
#remove 1st and second row
transpose = transpose[-c(1:2),]
#Add state vector as a variable
transpose_1 = cbind(transpose, state)
transpose_1 = as.data.frame(transpose_1)
#reset row names
rownames(transpose_1) = NULL
#reaarange data so state variable is in column 1
energy_clean_2 = transpose_1[,c(22,2:21)]
#Change missing values to N/A
energy_clean_3 = na_if(energy_clean_2,"--")
energy_clean_3 = na_if(energy_clean_3,"NM")
#Change * to 0 (These are values less than .5 that were rounded to 0 in dataset)
energy_clean_3[energy_clean_3 == "*"] <- "0"
#Remove US and DC data
energy_clean_3 = energy_clean_3[-c(1), ]
energy_clean_final = energy_clean_3[-c(9), ]
#Reset row names again...not sure why I have to do this again
rownames(energy_clean_final) = NULL
#Since, I had to transform NM values, to NM. I need to rename New Mexico as "NM"
energy_clean_final[energy_clean_final == "NM."] = "NM"
#Remove columns with no observations
energy_clean_final = energy_clean_final[,-c(12)]
energy_clean_final = energy_clean_final[,-c(18:19)]
energy_clean_final = energy_clean_final[,-c(14)]
#This data is now in the format I need to be able to use it, and cleaned sufficiently.
graph_6.0.1 = ggplot(data = final_dataset, aes(x = Renewables, y = co2_pop, col = state_category, label = state, group = state_category)) +
geom_point() + scale_color_manual(values=c("blue", "purple", "red")) +
geom_text(hjust=1, vjust=1.5, size = 3) +
ylab("CO2 Emissions") +
xlab("Renewable Energy %") +ylim(0,25000) +
geom_smooth(method = "lm", se = FALSE)
graph_6.0.1
View(dataset_final)
### Clean Energy Data ####
energy_clean = energy[-c(1:9), ]  #remove rows 1-9
colnames(energy_clean) = energy_clean[1,] #set column names and remove corresponding row
energy_clean = energy_clean[-c(1), ]  #remove row corresponding to variable names
#Remove data that is unnecessary for our analysis
energy_clean = energy_clean[-c(1:2),]
energy_clean = energy_clean[-c(3),]
energy_clean = energy_clean[-c(4:5),]
energy_clean = energy_clean[-c(6),]
energy_clean = energy_clean[-c(8:34),]
energy_clean = energy_clean[-c(8:11),]
energy_clean = energy_clean[-c(9),]
energy_clean = energy_clean[-c(14:27),]
energy_clean = energy_clean[-c(15),]
energy_clean = energy_clean[-c(16:51),]
energy_clean = energy_clean[-c(20:21),]
energy_clean = energy_clean[-c(21:22),]
energy_clean = energy_clean[-c(22:25),]
#Create a state vector including US and DC and another vector with just the fifty states
state = c("US","AL","AK","AZ", "AR" ,"CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
fiftystates = c("AL","AK","AZ", "AR" ,"CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
#Transform matrix from long to wide format
transpose = t(energy_clean)
#Make the matrix a dataframe
transpose = as.data.frame(transpose)
#Set the column names
colnames(transpose) = transpose[1,]
#remove 1st and second row
transpose = transpose[-c(1:2),]
#Add state vector as a variable
transpose_1 = cbind(transpose, state)
transpose_1 = as.data.frame(transpose_1)
#reset row names
rownames(transpose_1) = NULL
#reaarange data so state variable is in column 1
energy_clean_2 = transpose_1[,c(22,2:21)]
#Change missing values to N/A
energy_clean_3 = na_if(energy_clean_2,"--")
energy_clean_3 = na_if(energy_clean_3,"NM")
#Change * to 0 (These are values less than .5 that were rounded to 0 in dataset)
energy_clean_3[energy_clean_3 == "*"] <- "0"
#Remove US and DC data
energy_clean_3 = energy_clean_3[-c(1), ]
energy_clean_final = energy_clean_3[-c(9), ]
#Reset row names again...not sure why I have to do this again
rownames(energy_clean_final) = NULL
#Since, I had to transform NM values, to NM. I need to rename New Mexico as "NM"
energy_clean_final[energy_clean_final == "NM."] = "NM"
#Remove columns with no observations
energy_clean_final = energy_clean_final[,-c(12)]
energy_clean_final = energy_clean_final[,-c(18:19)]
energy_clean_final = energy_clean_final[,-c(14)]
#This data is now in the format I need to be able to use it, and cleaned sufficiently.
setwd("/Users/nathanbush/Documents/GitHub/Data-Analytics-Term-Project")
View(states)
View(tables)
save(final_dataset, file = "final_dataset.Rdata")
save(color, file = "color.Rdata")
save(states, file = "states.Rdata")
save(final_final, file = "final_final.Rdata")
save(dataset_final_new, file = "dataset_final_new.Rdata")
save(final_dataset, file = "exploratory_analysis_dataset.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/dataset_final_new.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/dataset_final_new.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/color.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/states.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/final_final.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/final_data.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/dataset_final_new.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/color.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/states.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/final_final.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/final_dataset.Rdata")
states <- states(cb = TRUE)
names(states)[names(states) == "STUSPS"] <- "state"
final_final <- left_join(final_dataset, states, by = "state")
affiliation_map <- tm_shape(final_final)+tm_polygons(col ="state_category", palette = c(Blue = "blue", Red = "red", Purple = "purple"))
affiliation_map
states <- states(cb = TRUE)
names(states)[names(states) == "STUSPS"] <- "state"
final_final <- left_join(final_dataset, states, by = "state")
final_final <- st_as_sf(final_final)
affiliation_map <- tm_shape(final_final)+tm_polygons(col ="state_category", palette = c(Blue = "blue", Red = "red", Purple = "purple"))
affiliation_map
st_as
affiliation_map <- tm_shape(final_final)+tm_polygons(col ="state_category", palette = c(Blue = "blue", Red = "red", Purple = "purple"))
affiliation_map
affiliation_map <- tm_shape(final_final)+tm_polygons(col ="state_category", palette = c(Blue = "blue", Red = "red", Purple = "purple", legend.show = FALSE)) +
affiliation_map
affiliation_map <- tm_shape(final_final)+tm_polygons(col ="state_category", palette = c(Blue = "blue", Red = "red", Purple = "purple", legend.show = FALSE)) +
affiliation_map
affiliation_map <- tm_shape(final_final)+tm_polygons(col ="state_category", palette = c(Blue = "blue", Red = "red", Purple = "purple", legend.show = FALSE))
affiliation_map
affiliation_map <- tm_shape(final_final)+tm_polygons(col ="state_category", palette = c(Blue = "blue", Red = "red", Purple = "purple"), legend.show = FALSE)
affiliation_map
energy_map = tm_shape(final_final)+tm_polygons(col ="Renewables", palette =c("Greens"), legend.show = FALSE)
energy_map
election_2020 = read_csv("/Users/nathanbush/Desktop/Data Analytics/Term Project/2020 election results by county.csv")
election_2020 = read_csv("/Users/nathanbush/Desktop/Data Analytics/Term Project/2020 election results by county.csv")
energy = read_csv("/Users/nathanbush/Desktop/Data Analytics/Term Project/Energy Data.csv")
election_2020 = read_csv("/Users/nathanbush/Desktop/Data Analytics/Term Project/2020 election results by county.csv")
energy = read_csv("/Users/nathanbush/Documents/GitHub/Data-Analytics-Term-Project/Raw Data/Energy Data.csv")
president = read_csv("/Users/nathanbush/Documents/GitHub/Data-Analytics-Term-Project/Raw Data/President Data (MIT).csv")
#setwd("YOU MUST ENTER FILE HERE")
### Clean Energy Data ####
energy_clean = energy[-c(1:9), ]  #remove rows 1-9
colnames(energy_clean) = energy_clean[1,] #set column names and remove corresponding row
energy_clean = energy_clean[-c(1), ]  #remove row corresponding to variable names
#Remove data that is unnecessary for our analysis
energy_clean = energy_clean[-c(1:2),]
energy_clean = energy_clean[-c(3),]
energy_clean = energy_clean[-c(4:5),]
energy_clean = energy_clean[-c(6),]
energy_clean = energy_clean[-c(8:34),]
energy_clean = energy_clean[-c(8:11),]
energy_clean = energy_clean[-c(9),]
energy_clean = energy_clean[-c(14:27),]
energy_clean = energy_clean[-c(15),]
energy_clean = energy_clean[-c(16:51),]
energy_clean = energy_clean[-c(20:21),]
energy_clean = energy_clean[-c(21:22),]
energy_clean = energy_clean[-c(22:25),]
#Create a state vector including US and DC and another vector with just the fifty states
state = c("US","AL","AK","AZ", "AR" ,"CA","CO","CT","DE","DC","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
fiftystates = c("AL","AK","AZ", "AR" ,"CA","CO","CT","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM.","NY","NC","ND","OH","OK","OR","PA","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY")
#Transform matrix from long to wide format
transpose = t(energy_clean)
#Make the matrix a dataframe
transpose = as.data.frame(transpose)
#Set the column names
colnames(transpose) = transpose[1,]
#remove 1st and second row
transpose = transpose[-c(1:2),]
#Add state vector as a variable
transpose_1 = cbind(transpose, state)
transpose_1 = as.data.frame(transpose_1)
#reset row names
rownames(transpose_1) = NULL
#reaarange data so state variable is in column 1
energy_clean_2 = transpose_1[,c(22,2:21)]
#Change missing values to N/A
energy_clean_3 = na_if(energy_clean_2,"--")
energy_clean_3 = na_if(energy_clean_3,"NM")
#Change * to 0 (These are values less than .5 that were rounded to 0 in dataset)
energy_clean_3[energy_clean_3 == "*"] <- "0"
#Remove US and DC data
energy_clean_3 = energy_clean_3[-c(1), ]
energy_clean_final = energy_clean_3[-c(9), ]
#Reset row names again...not sure why I have to do this again
rownames(energy_clean_final) = NULL
#Since, I had to transform NM values, to NM. I need to rename New Mexico as "NM"
energy_clean_final[energy_clean_final == "NM."] = "NM"
#Remove columns with no observations
energy_clean_final = energy_clean_final[,-c(12)]
energy_clean_final = energy_clean_final[,-c(18:19)]
energy_clean_final = energy_clean_final[,-c(14)]
###Clean Presidential Data####
#filter by year(2020)
president_1 = president |>
filter(year == 2020) |>
group_by(candidate)
#Check to see if all voting methods are the same, they aren't cannot delete
unique(president_1$mode)
#Delete unnecessary columns
president_1 = president_1[,-c(2) ]
president_1 = president_1[,-c(4:5) ]
president_1 = president_1[,-c(8) ]
#Filter out parties other than REP & DEM
president_2 = president_1 |>
filter(party == "REPUBLICAN" | party == "DEMOCRAT")
#Group data appropriately
president_3 = president_2 |>
group_by(state_po, candidate) |>
mutate(sum_state = sum(candidatevotes))
#Now we have a column with the total number of votes for each candidate in each state,
#and we can begin to clean the data of county information
president_4 = president_3[,-c(1) ]
president_4 = president_4[,-c(4) ]
president_4 = president_4[,-c(2) ]
president_4 = president_4[,-c(3:5) ]
#Now, we can keep only the unique rows in our dataest.
president_5 = distinct(president_4)
#Create dummy for who each state voted for
won = won = c(0,1,0,1,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,1,1,0,1,0,0,1,1,0,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,1,0,1,0,0,1,0,1,1,0,1,0,1,0,0,1,0,1,1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,0,1,0,1,0,0,1)
#Append the datasets and remove columns that do not correspond to the winning candidate
president_6 = cbind(president_5, won)
president_7 = filter(president_6, ...4 == "1")
#Remove unnecessary columns
president_final = president_7[,-c(3:4)]
#Remove DC from the observations
president_final = president_final[-c(9),]
#Presidential data is now clean and ready to merge
###Clean Election Data####
library(tinytex)
library(rvest)
#Filter by which candidate won in each county
election = election_2020 |>
filter(won ==TRUE)
#Filter by which candidate won in each county
election = election_2020 |>
filter(won =="TRUE")
View(election_2020)
View(election_2020)
load("~/Documents/GitHub/Data-Analytics-Term-Project/Relevant Files/dataset_final_new.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/Relevant Files/color.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/Relevant Files/states.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/Relevant Files/final_final.Rdata")
load("~/Documents/GitHub/Data-Analytics-Term-Project/Relevant Files/final_dataset.Rdata")
load("~/Documents/GitHub/Data Analytics Term Project/Relevant Files/dataset_final_new.Rdata")
load("~/Documents/GitHub/Data Analytics Term Project/Relevant Files/color.Rdata")
load("~/Documents/GitHub/Data Analytics Term Project/Relevant Files/states.Rdata")
load("~/Documents/GitHub/Data Analytics Term Project/Relevant Files/final_final.Rdata")
load("~/Documents/GitHub/Data Analytics Term Project/Relevant Files/final_dataset.Rdata")
#Generate a 4th graph
graph_4 = ggplot(data = final_dataset, aes(x = new_solar, y = precip, col = state_category)) +
geom_point() + scale_color_manual(values=c("blue", "purple", "red")) + xlim(0,1)
#Generate a 4th graph
graph_4 = ggplot(data = final_dataset, aes(x = new_solar, y = precip, col = state_category)) +
geom_point() + scale_color_manual(values=c("blue", "purple", "red")) + xlim(0,1)
#Compare graphs 2.1 and 4
graph_4
#Generate a 4th graph
graph_4 = ggplot(data = final_dataset, aes(x = new_solar, y = precip, col = state_category)) +
geom_point() + scale_color_manual(values=c("blue", "purple", "red")) + xlim(0,1)
energy_map
```
if (!require("tidymodels")) install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
data(ames)
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
install.packages("tidymodels")
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
install.packages("tidymodels")
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
library(tidymodels)
